# Docker Compose configuration for CFDI Automation Platform
# Multi-service setup with frontend, backend, Python browser automation, Nginx, and Redis

services:
  # Frontend - Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    env_file:
      - docker.env
    volumes:
      - frontend_data:/app/.next
    depends_on:
      - backend_api
      - python_browser
    networks:
      - cfdi_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API - Node.js/Express Server
  backend_api:
    build:
      context: ./backend
      dockerfile: Dockerfile.nodejs
      target: runner
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
    env_file:
      - docker.env
    volumes:
      - backend_data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - cfdi_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Python Browser Automation Service
  python_browser:
    build:
      context: ./backend
      dockerfile: Dockerfile.python
      target: runner
    ports:
      - "9000:9000"
    environment:
      - PYTHONUNBUFFERED=1
      - PORT=9000
    env_file:
      - docker.env
    volumes:
      - browser_data:/app/browser_data
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - cfdi_network
    security_opt:
      - seccomp:unconfined
    cap_add:
      - SYS_ADMIN
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend_api
      - python_browser
    networks:
      - cfdi_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - cfdi_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Volumes for persistent data
volumes:
  frontend_data:
    driver: local
  backend_data:
    driver: local
  browser_data:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local
  redis_data:
    driver: local

# Custom network for service communication
networks:
  cfdi_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 